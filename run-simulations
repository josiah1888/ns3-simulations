echo "Cleaning"
rm -rf output

echo "Starting simulations..."

makeDirs=true
makePlots=true
runSim=true
runTshark=true
stopTime='600'
numTrials=50
$makeDirs && mkdir output

for algorithm in 'GPSR' 'HWMP'; do
    $makeDirs && mkdir "output/$algorithm"
    for mobilityScene in 'full-grid' 'city-block' 'straight-line'; do
        $makeDirs && mkdir "output/$algorithm/$mobilityScene"
        for variation in 'scale' 'failure'; do
            $makeDirs && mkdir "output/$algorithm/$mobilityScene/$variation"
            for experiment in 1 2 3 4 5 6; do
                $makeDirs && mkdir "output/$algorithm/$mobilityScene/$variation/experiment$experiment"
                for trial in $(seq 1 $numTrials); do
                    $makeDirs && mkdir "output/$algorithm/$mobilityScene/$variation/experiment$experiment/trial$trial"
                    nNodes=9 #Can't reliably go higher than this
                    variationArg=''
                    randInt=$(( $RANDOM % 1000 ))
                    randReal=$(bc -l <<< "1 + $randInt * 0.001")

                    echo "Using scale factor: $randReal"

                    if [ $variation == 'scale' ]; then
                        nNodes="$(( ($experiment + 1) * 2 ))"

                        if [ $experiment == 1 ]; then
                            nNodes=4
                        elif [ $experiment == 2 ]; then
                            nNodes=6
                        elif [ $experiment == 3 ]; then
                            nNodes=9
                        elif [ $experiment == 4 ]; then
                            nNodes=12
                        elif [ $experiment == 5 ]; then
                            nNodes=16
                        elif [ $experiment == 6 ]; then
                            nNodes=20
                        fi
                    fi

                    if [ $variation == 'failure' ]; then
                        failureProb=$(bc -l <<< "$experiment * 0.1")
                        variationArg="--FailureProb=$failureProb"
                    fi

                    if [ $algorithm == 'GPSR' ]; then
                        tsharkFilter='wlan.fc.retry == 0 && tcp && ip.src == 10.1.1.1 && ip.dst == 10.1.1.2'
                        headerSize=76
                    else
                        tsharkFilter='wlan.fc.retry == 0 && llc && wlan.sa == 00:00:00:00:00:01 && wlan.da == 00:00:00:00:00:02'
                        headerSize=48
                    fi

                    echo "Starting simulation: $algorithm/$mobilityScene/$variation with $variationArg Nodes=$nNodes"
                    $runSim && ./waf --cwd="output/$algorithm/$mobilityScene/$variation/experiment$experiment/trial$trial" --run "mobicom_expr --Scale=$randReal --RoutingModel=$algorithm --StopTime=$stopTime --Protocol=tcp --MobilityScene=$mobilityScene --NNodes=$nNodes $variationArg" > "output/$algorithm/$mobilityScene/$variation/experiment$experiment/trial$trial/output.txt"

                    cd "output/$algorithm/$mobilityScene/$variation/experiment$experiment/trial$trial"
                    root="../../../../../.."

                    echo "Analyzing data"
                    srcId=$(pcregrep -o1 'id=([0-9]+)$' "output.txt")
                    srcFile=$(ls mp--$srcId*)
                    $runTshark && tshark -r "$srcFile" -q -z "io,stat,1,($tsharkFilter)" > "tshark-out.txt"
                                                                                                                                            
                    tail -n +13 "tshark-out.txt" | pcregrep -o1 -o3 -o4 '^[^0-9]+([0-9\s]+)[^0-9]+([0-9\s]+)[^0-9]+([0-9\s]+)[^0-9]+([0-9]+)' | awk -v size=$headerSize '{print $1,"\t",($3 - $2 * size)}' > "io-data.txt"
                    awk '{a+=$2} END{print a/NR}' io-data.txt > 'average-io.txt'
                    awk '{delta = $2 - avg; avg += delta / NR; mean2 += delta * ($2 - avg); } END { print sqrt(mean2 / NR); }' io-data.txt > 'std-io.txt'

                    echo "Deleting .pcap files"
                    ls mp--* | xargs rm

                    $makePlots && gnuplot "$root/plot-cwnd-$algorithm"
                    cd "$root"
                done

                echo "Averaging io-data"
                cd "output/$algorithm/$mobilityScene/$variation/experiment$experiment"
                cat trial*/average-io.txt | awk '{a+=$1} END{print a/NR}' > 'average-io.txt'
                cat trial*/std-io.txt | awk '{a+=$1} END{print a/NR}' > 'std-io.txt'
                cd "../../../../../"
            done
        done
    done
done

#scp -i ~/Downloads/testkey.pem -r ubuntu@ec2-54-87-132-197.compute-1.amazonaws.com:workspace/ns-allinone-3.25/ns-3.25/test-run ~/test-run